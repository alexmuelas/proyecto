-------EVENTO NADA MAS REGISTRARTE------

Nos vamos a app\Providers\EventsServiceProvider.php

Nos aseguramos que este descomentado:

 protected $listen = [
         'Illuminate\Auth\Events\Verified' => [
             'App\Listeners\LogVerifiedUser',
        ],

        
    ];

Ejecutamos el comando php artisan event:generate el cual nos genera el siguiente archivo app\Listeners\LogVerifiedUser.php
dentro de ese archivo en el _constructor hacemos la llamada a la BBDD que queremos que se ejecute cuando el usuario que se
acaba de registrar acepta el correo de verificacion que se le manda. 


-------CREACION EVENTOS-------

Lo primero de todo es editar el crontab
-crontab -e

Le añadimos:

    Si es en docker: * * * * * php /var/www/proyectocomunio/artisan schedule:run >> /dev/null 2>&1

    Si es en linux/windows: * * * * * php /home/alex/docker/proyectocomunio/artisan schedule:run >> /dev/null 2>&1


Si quiero probarlo al momento:
     php artisan schedule:run


     Otra forma es 
     php artisan make:command RepartirPuntos --command=repartir:puntos
     Se crea un arcihvo en la carpeta Commands
     Dentro de ese archivo 

     En el     public function handle()
 metemos la funcion que queremos ejecutar

 y en el Kernel en $commands añadimos         \App\Console\Commands\RepartirPuntos::class
 para ejecutarlo php artisan make:command php artisan repartir:puntos


 Para repartir los puntos meto el comando: php artisan repartir:puntos
para rellenar la tabla puja y que continuamente se autorenueve meto el comando php artisan jugadores:puja



-------TRADUCCION-------

Lo primero de todo es crear el middleware

php artisan make:middleware Language y modificarlo

y en app\Htpp\Controller añadimos la siguietne funcion

public function setLanguage(string $lang)
    {
        if (array_key_exists($lang, config('language'))) {
            session()->put('applocale', $lang);
        }
        return back();
    }

En la carpeta config añadimos el archivo language.php

En el kernel .php añadimos en     protected $middlewareGroups = [
             \App\Http\Middleware\Language::class,


Añadimos la ruta Route::get('set_language/{lang}', 'Controller@setLanguage')->name('set_language');



para cambiar de idioma cada texto sustituimos el texto por 
{{ __('app.name') }}

en la carpeta en y es añadimos la archivo app     'name'   => 'Nombre',
 o     'name'   => 'Name',

